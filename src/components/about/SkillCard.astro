---
export interface Props {
  title: string;
  icon: string;
  skills: string[];
  class?: string;
}

const { title, icon, skills, class: className = "", ...rest } = Astro.props;
---

<div class={`skill-category ${className}`} {...rest}>
  <div class="skill-card">
    <h3
      class="text-lg font-medium mb-3 text-center md:text-left flex items-center text-[var(--text-color)]"
    >
      <span class="mr-2 text-xl">{icon}</span>
      {title}
    </h3>
    <div class="flex flex-wrap gap-2 justify-center md:justify-start">
      {
        skills.map((skill, index) => (
          <div class="skill-tag px-3 py-1 backdrop-blur-sm rounded-md text-sm border shadow-sm text-[var(--text-color)]">
            {skill}
          </div>
        ))
      }
    </div>
  </div>
</div>

<style>
  /* Skill card styling */
  .skill-card {
    background: var(--card-color-transparent);
    border-radius: 8px;
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
    padding: 1rem;
    transition: all 0.3s ease;
  }

  .skill-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px var(--primary-color-transparent);
    border-color: var(--primary-color);
  }

  /* Skill tag styling - 初始隱藏 */
  .skill-tag {
    background: var(--card-color-transparent);
    border-color: var(--primary-color-transparent);
    opacity: 0;
    transform: scale(0.5);
    transition: all 0.8s ease;
    cursor: default;
  }

  .skill-tag:hover {
    transform: scale(1.05) translateY(-2px);
    background: var(--primary-color-transparent);
    border-color: var(--primary-color);
  }

  @keyframes skillTagAppear {
    from {
      opacity: 0;
      transform: scale(0.5);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .skill-tag {
      font-size: 0.8rem;
      padding: 0.5rem 0.75rem;
    }
  }
</style>
