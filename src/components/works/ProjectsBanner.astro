---
interface Work {
  id: string;
  cover?: string;
  title: string;
  slug: string;
}

interface Props {
  works: Work[];
  lang: string;
}

const { works, lang } = Astro.props;

// 創建足夠的作品項目來填滿滾動條
const duplicatedWorks = [...works, ...works, ...works, ...works];

const bannerTitle = lang === "zh-tw" ? "作品集" : "Portfolio";
const bannerSubtitle =
  lang === "zh-tw" ? "探索我的創意世界" : "Explore My Creative World";
---

<section
  class="relative overflow-hidden py-28" /* 增加垂直 padding */
  style="background-color: var(--background-color);"
>
  <!-- 背景裝飾 (我們將移除這個，讓背景色由 --background-color 控制) -->
  <!-- <div class="absolute inset-0 bg-black bg-opacity-20"></div> -->

  <!-- 動畫容器 -->
  <div class="relative">
    <!-- 上排 - 左到右 -->
    <div class="works-banner-row mb-8" data-direction="left-to-right">
      <div class="works-scroll-container">
        {
          duplicatedWorks.map((work, index) => (
            <div
              class="work-item"
              data-work-id={work.slug}
              data-work-lang={lang}
            >
              {work.cover ? (
                <img
                  src={work.cover}
                  alt={work.title}
                  class="work-image"
                  loading="lazy"
                />
              ) : (
                <div class="work-placeholder">
                  <span class="placeholder-text">{work.title.charAt(0)}</span>
                </div>
              )}
              <div class="work-overlay">
                <span class="work-title">{work.title}</span>
              </div>
            </div>
          ))
        }
      </div>
    </div>

    <!-- 下排 - 右到左 -->
    <div class="works-banner-row" data-direction="right-to-left">
      <div class="works-scroll-container">
        {
          duplicatedWorks.map((work, index) => (
            <div
              class="work-item"
              data-work-id={work.slug}
              data-work-lang={lang}
            >
              {work.cover ? (
                <img
                  src={work.cover}
                  alt={work.title}
                  class="work-image"
                  loading="lazy"
                />
              ) : (
                <div class="work-placeholder">
                  <span class="placeholder-text">{work.title.charAt(0)}</span>
                </div>
              )}
              <div class="work-overlay">
                <span class="work-title">{work.title}</span>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>

  <!-- 標題覆蓋層 -->
  <div
    class="absolute inset-0 flex flex-col items-center justify-center text-center pointer-events-none"
  >
    <!-- 新增一個 div 來應用 backdrop-filter -->
    <div
      class="p-4 md:p-6 rounded-lg"
      style="
        backdrop-filter: blur(8px);
        -webkit-backdrop-filter: blur(8px);
        background-color: oklch(from var(--background-color) l c h / 10%);
      "
    >
      <h1
        class="text-5xl md:text-7xl font-bold"
        style="color: var(--text-color);"
      >
        {bannerTitle}
      </h1>
    </div>
    <!-- 副標題已移除 -->
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // 添加點擊事件
    document.querySelectorAll(".work-item").forEach((item) => {
      item.addEventListener("click", () => {
        const workId = item.getAttribute("data-work-id");
        const workLang = item.getAttribute("data-work-lang");

        if (workId && workLang) {
          // 添加點擊動畫
          (item as HTMLElement).style.transform = "scale(0.95)";

          // 延遲跳轉以顯示動畫
          setTimeout(() => {
            window.location.href = `/${workLang}/works/${workId}`;
          }, 200);
        }
      });
    });
  });
</script>

<style>
  .works-banner-row {
    height: 200px;
    overflow: hidden;
    mask-image: linear-gradient(
      to right,
      transparent 0%,
      black 10%,
      black 90%,
      transparent 100%
    );
    -webkit-mask-image: linear-gradient(
      to right,
      transparent 0%,
      black 10%,
      black 90%,
      transparent 100%
    );
  }

  .works-scroll-container {
    display: flex;
    gap: 1rem;
    height: 100%;
    will-change: transform;
    animation: scroll-left 30s linear infinite;
  }

  .works-banner-row[data-direction="right-to-left"] .works-scroll-container {
    animation: scroll-right 30s linear infinite;
  }

  @keyframes scroll-left {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-25%);
    }
  }

  @keyframes scroll-right {
    0% {
      transform: translateX(-25%);
    }
    100% {
      transform: translateX(0);
    }
  }

  .work-item {
    flex-shrink: 0;
    width: 300px;
    height: 180px;
    border-radius: 1rem;
    overflow: hidden;
    position: relative;
    cursor: pointer;
    transition: all 0.3s ease;
    /* box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3); */ /* 移除舊陰影 */
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); /* Tailwind shadow-lg 替代 */
    background-color: var(--card-color); /* 卡片背景色 */
  }

  .dark .work-item {
    box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1); /* Tailwind shadow-xl for dark */
    /* 考慮為深色模式添加特定陰影，例如帶有品牌色調 */
    /* box-shadow: 0 10px 15px -3px var(--primary-color-transparent), 0 4px 6px -4px var(--primary-color-transparent); */
  }

  .work-item:hover {
    transform: translateY(-5px) scale(1.03); /* 稍微放大效果 */
    /* box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4); */ /* 移除舊 hover 陰影 */
  }

  .dark .work-item:hover {
    /* box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1); */
  }

  .work-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }

  .work-item:hover .work-image {
    transform: scale(1.1);
  }

  .work-placeholder {
    width: 100%;
    height: 100%;
    /* background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); */ /* 移除固定漸層 */
    /* 背景色將由 .work-item 的 var(--card-color) 繼承或控制 */
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .placeholder-text {
    font-size: 4rem;
    font-weight: bold;
    /* color: white; */ /* 移除固定顏色 */
    color: var(--text-color-lighten); /* 使用 CSS 變數 */
    opacity: 0.7;
  }

  .work-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(
      to top,
      rgba(0, 0, 0, 0.8) 0%,
      rgba(0, 0, 0, 0.4) 50%,
      transparent 100%
    );
    display: flex;
    align-items: flex-end;
    padding: 1.5rem;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .work-item:hover .work-overlay {
    opacity: 1;
  }

  /* Default title style (Light mode, non-hover) */
  .work-title {
    color: var(--text-color);
    font-weight: 600;
    font-size: 1.2rem;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); /* Softer shadow for light mode text */
    transition: color 0.3s ease;
  }

  /* Light mode, on hover: Title should be light to contrast with dark overlay */
  .work-item:hover .work-title {
    color: oklch(100% 0 0 / 95%); /* White/very light text */
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.7); /* Stronger shadow for light text on dark overlay */
  }

  /* Dark mode, non-hover: Title is already light */
  .dark .work-title {
    color: oklch(100% 0 0 / 95%);
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.7);
  }

  /* Dark mode, on hover: Title remains light, as overlay is dark. No specific change needed from .dark .work-title if it's already correct. */
  /* However, to be explicit or if any adjustment is needed for hover on dark: */
  .dark .work-item:hover .work-title {
    color: oklch(100% 0 0 / 98%); /* Ensure it's very bright */
    text-shadow: 0 1px 4px rgba(0, 0, 0, 0.8);
  }

  /* 確保動畫流暢 */
  @media (prefers-reduced-motion: reduce) {
    .works-scroll-container {
      animation: none;
    }
  }
</style>
